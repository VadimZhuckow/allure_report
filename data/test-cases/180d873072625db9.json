{
  "uid" : "180d873072625db9",
  "name" : "Тест логина для юзера 'apexknight@yandex.ru' в окружении dev",
  "fullName" : "tests.ui.auth.test_login#test_login_ui_dev",
  "historyId" : "2d5f7d1436342838c5d72ec97bea311a",
  "time" : {
    "start" : 1732620598365,
    "stop" : 1732620617533,
    "duration" : 19168
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: Таймаут ожидания URL: /main",
  "statusTrace" : "self = <base.pages.login_page.LoginPage object at 0x7fd2df046230>\nexpected_url_fragment = '/main', timeout = 15\n\n    def verify_redirect(self, expected_url_fragment, timeout=15):\n        try:\n>           WebDriverWait(self.driver, timeout).until(EC.url_contains(expected_url_fragment))\n\nbase/base_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0b096155-11f7-4173-9e1f-69ac985926c0\")>\nmethod = <function url_contains.<locals>._predicate at 0x7fd2de78b760>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"0b096155-11f7-4173-9e1f-69ac985926c0\")>\n\n    @pytest.mark.dev\n    @allure.story(\"Логин\")\n    @allure.title(f\"Тест логина для юзера {MAIL} в окружении dev\")\n    def test_login_ui_dev(setup_driver):\n        landing = os.getenv('LANDING_DEV')\n        driver = setup_driver\n        driver.get(landing)\n    \n        login_page = LoginPage(driver)\n    \n        with allure.step(\"Нажимаем кнопку 'Начать'\"):\n            login_page.get_started()\n    \n        with allure.step(\"Вводим почту\"):\n            print(f'ETA POCHTA {MAIL}')\n            login_page.enter_email(MAIL)\n    \n        with allure.step(\"Вводим пароль\"):\n            login_page.enter_password(PASSW)\n    \n        with allure.step(\"Нажимаем кнопку вход\"):\n            login_page.submit()\n    \n        print(f\"Текущий URL после входа: {driver.current_url}\")\n    \n>       login_page.verify_redirect(\"/main\")\n\ntests/ui/auth/test_login.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.pages.login_page.LoginPage object at 0x7fd2df046230>\nexpected_url_fragment = '/main', timeout = 15\n\n    def verify_redirect(self, expected_url_fragment, timeout=15):\n        try:\n            WebDriverWait(self.driver, timeout).until(EC.url_contains(expected_url_fragment))\n            current_url = self.driver.current_url\n            assert expected_url_fragment in current_url, (\n                f\"Тест не пройден: не попали на {expected_url_fragment}, текущий URL: {current_url}\"\n            )\n        except TimeoutException:\n            self.take_screenshot(\"screenshot_error\")\n>           raise AssertionError(f\"Таймаут ожидания URL: {expected_url_fragment}\")\nE           AssertionError: Таймаут ожидания URL: /main\n\nbase/base_page.py:30: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "setup_driver",
    "time" : {
      "start" : 1732620584373,
      "stop" : 1732620598364,
      "duration" : 13991
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: Таймаут ожидания URL: /main",
    "statusTrace" : "self = <base.pages.login_page.LoginPage object at 0x7fd2df046230>\nexpected_url_fragment = '/main', timeout = 15\n\n    def verify_redirect(self, expected_url_fragment, timeout=15):\n        try:\n>           WebDriverWait(self.driver, timeout).until(EC.url_contains(expected_url_fragment))\n\nbase/base_page.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"0b096155-11f7-4173-9e1f-69ac985926c0\")>\nmethod = <function url_contains.<locals>._predicate at 0x7fd2de78b760>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.15/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"0b096155-11f7-4173-9e1f-69ac985926c0\")>\n\n    @pytest.mark.dev\n    @allure.story(\"Логин\")\n    @allure.title(f\"Тест логина для юзера {MAIL} в окружении dev\")\n    def test_login_ui_dev(setup_driver):\n        landing = os.getenv('LANDING_DEV')\n        driver = setup_driver\n        driver.get(landing)\n    \n        login_page = LoginPage(driver)\n    \n        with allure.step(\"Нажимаем кнопку 'Начать'\"):\n            login_page.get_started()\n    \n        with allure.step(\"Вводим почту\"):\n            print(f'ETA POCHTA {MAIL}')\n            login_page.enter_email(MAIL)\n    \n        with allure.step(\"Вводим пароль\"):\n            login_page.enter_password(PASSW)\n    \n        with allure.step(\"Нажимаем кнопку вход\"):\n            login_page.submit()\n    \n        print(f\"Текущий URL после входа: {driver.current_url}\")\n    \n>       login_page.verify_redirect(\"/main\")\n\ntests/ui/auth/test_login.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <base.pages.login_page.LoginPage object at 0x7fd2df046230>\nexpected_url_fragment = '/main', timeout = 15\n\n    def verify_redirect(self, expected_url_fragment, timeout=15):\n        try:\n            WebDriverWait(self.driver, timeout).until(EC.url_contains(expected_url_fragment))\n            current_url = self.driver.current_url\n            assert expected_url_fragment in current_url, (\n                f\"Тест не пройден: не попали на {expected_url_fragment}, текущий URL: {current_url}\"\n            )\n        except TimeoutException:\n            self.take_screenshot(\"screenshot_error\")\n>           raise AssertionError(f\"Таймаут ожидания URL: {expected_url_fragment}\")\nE           AssertionError: Таймаут ожидания URL: /main\n\nbase/base_page.py:30: AssertionError",
    "steps" : [ {
      "name" : "Нажимаем кнопку 'Начать'",
      "time" : {
        "start" : 1732620599791,
        "stop" : 1732620602275,
        "duration" : 2484
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Вводим почту",
      "time" : {
        "start" : 1732620602275,
        "stop" : 1732620602339,
        "duration" : 64
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Вводим пароль",
      "time" : {
        "start" : 1732620602339,
        "stop" : 1732620602370,
        "duration" : 31
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Нажимаем кнопку вход",
      "time" : {
        "start" : 1732620602370,
        "stop" : 1732620602386,
        "duration" : 16
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "setup_driver::0",
    "time" : {
      "start" : 1732620617577,
      "stop" : 1732620618456,
      "duration" : 879
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "story",
    "value" : "Логин"
  }, {
    "name" : "tag",
    "value" : "dev"
  }, {
    "name" : "parentSuite",
    "value" : "tests.ui.auth"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "host",
    "value" : "fv-az1426-999"
  }, {
    "name" : "thread",
    "value" : "2155-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.ui.auth.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "dev" ]
  },
  "source" : "180d873072625db9.json",
  "parameterValues" : [ ]
}